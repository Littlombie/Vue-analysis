(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{147:function(e,t,a){"use strict";a.r(t);var n=a(0),_=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),a("hr"),e._v(" "),e._m(2),e._v(" "),a("p",[e._v("钩子是Windows消息处理机制的一个平台,应用程序可以在上面设置子程以监视指定窗口的某种消息；\n钩子机制允许应用程序截获处理window消息或特定事件，\n钩子函数可以理解为js运行进程中在其特定段时的回调函数")]),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),a("p",[e._v("在new Vue() 时 开始观测数据")]),e._v(" "),e._m(6),e._v(" "),e._m(7),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),e._m(12),e._v(" "),a("p",[e._v("Vue所有的生命周期钩子自动绑定在this上下文到实例中，因此你可以访问数据，对属性和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法。这是因为箭头函数绑定了父上下文，因此this与你期待的Vue实例不同。")]),e._v(" "),e._m(13),e._v(" "),a("p",[e._v("注：")]),e._v(" "),a("ul",[e._m(14),e._v(" "),a("li",[a("p",[e._v("mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 "),a("a",{attrs:{href:"https://blog.csdn.net/shuidinaozhongyan/article/details/72630573",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("vm.$nextTick")]),a("OutboundLink")],1),e._v("\n(https://blog.csdn.net/sinat_17775997/article/details/71638144)")])]),e._v(" "),e._m(15),e._v(" "),e._m(16),e._v(" "),e._m(17),e._v(" "),e._m(18),e._v(" "),e._m(19)]),e._v(" "),e._m(20),e._v(" "),e._m(21),e._v(" "),e._m(22),e._v(" "),e._m(23),e._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5b41bdef6fb9a04fe63765f1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue的钩子函数 [路由导航守卫、keep-alive、生命周期钩子]"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("实例demo：\n见"),a("a",{attrs:{href:"https://github.com/Littlombie/Vue-analysis/tree/master/02-lifeCycle/template",target:"_blank",rel:"noopener noreferrer"}},[a("code",[e._v("template")]),a("OutboundLink")],1),e._v(" "),e._v("\n参考文档："),a("br"),e._v(" "),a("a",{attrs:{href:"https://juejin.im/post/5ad10800f265da23826e681e?utm_medium=hao.caibaojian.com&utm_source=hao.caibaojian.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("如何解释vue的生命周期才能令面试官满意？"),a("OutboundLink")],1),a("br"),e._v(" "),a("a",{attrs:{href:"http://blog.poetries.top/2018/08/26/vue-lifecircle/?utm_medium=hao.caibaojian.com&utm_source=hao.caibaojian.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("vue生命周期（五）"),a("OutboundLink")],1),a("br"),e._v(" "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&mid=2651555022&idx=1&sn=552856ad4af7bb9560217f6deec65270&chksm=8025530fb752da190830e52ca6a9b24d1e7440e1d6cccbfff6355f7583d4f4749400e541739e",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入 Vue 生命周期"),a("OutboundLink")],1),a("br"),e._v(" "),a("a",{attrs:{href:"https://segmentfault.com/a/1190000008771768?_ea=1739750",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue 实例中的生命周期钩子详解"),a("OutboundLink")],1),a("br"),e._v(" "),a("a",{attrs:{href:"https://www.cnblogs.com/locim/p/8892738.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js源码解读"),a("OutboundLink")],1),a("br"),e._v(" "),a("a",{attrs:{href:"http://blog.51cto.com/9195095/1963227",target:"_blank",rel:"noopener noreferrer"}},[e._v("生命周期"),a("OutboundLink")],1),e._v(" "),a("a",{attrs:{href:"https://juejin.im/post/5b41bdef6fb9a04fe63765f1",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue的钩子函数[路由导航守卫、keep-alive、生命周期钩子]"),a("OutboundLink")],1),a("br"),e._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/xdnloveme/article/details/78035065",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue生命周期中mounted和created的区别"),a("OutboundLink")],1),a("br"),e._v(" "),a("a",{attrs:{href:"https://www.jb51.net/article/124737.htm",target:"_blank",rel:"noopener noreferrer"}},[e._v("深入理解Vue生命周期、手动挂载及挂载子组件"),a("OutboundLink")],1)]),e._v(" "),e._m(24),e._v(" "),e._m(25)])},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"vue的生命周期方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue的生命周期方法","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue的生命周期方法")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("p",[this._v("研究方向")]),this._v(" "),t("ul",[t("li",[this._v("hook机制")])])]),this._v(" "),t("li",[t("p",[this._v("研究方法")]),this._v(" "),t("ul",[t("li",[this._v("各个hook在哪个阶段触发，为啥会在这个阶段触发？触发这个钩子可以改变什么或者得到什么？")])])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"钩子函数（hook）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#钩子函数（hook）","aria-hidden":"true"}},[this._v("#")]),this._v(" 钩子函数（Hook）")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"什么是生命周期？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是生命周期？","aria-hidden":"true"}},[this._v("#")]),this._v(" 什么是生命周期？")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("生命周期：Vue 实例从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期，各个阶段有相对应的事件钩子\n"),t("img",{attrs:{src:"https://github.com/Littlombie/Vue-analysis/blob/master/02-lifeCycle/LifeCycle1.png?raw=true",alt:"vue 的生命周期"}})])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[this._v("图中 数据观测：")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ul",[a("li",[a("code",[e._v("init event & lifeCycle")]),e._v(":  表示"),a("code",[e._v("new Vue")]),e._v(" 后事件和生命周期的"),a("code",[e._v("init")])]),e._v(" "),a("li",[e._v("当"),a("code",[e._v("created")]),e._v("完成之后，它会去判断"),a("code",[e._v("instance")]),e._v("（实例）里面是否含有"),a("code",[e._v("“el”option")]),e._v("（选项），如果没有的话，它会调用"),a("code",[e._v("vm.$mount(el)")]),e._v("这个方法，然后执行下一步；如果有的话，直接执行下一步。紧接着会判断是否含有"),a("code",[e._v("“template”")]),e._v("这个选项，如果有的话，它会把"),a("code",[e._v("template")]),e._v("解析成一个"),a("code",[e._v("render function")]),e._v(" ，这是一个"),a("code",[e._v("template")]),e._v("编译的过程，结果是解析成了"),a("code",[e._v("render")]),e._v("函数：")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("render (h) {\n  return h('div', {}, this.text)\n}\n")])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[a("code",[e._v("render")]),e._v("函数里面的传参h就是Vue里面的"),a("code",[e._v("createElement")]),e._v("方法，"),a("code",[e._v("return")]),e._v("返回一个"),a("code",[e._v("createElement")]),e._v("方法，其中要传3个参数，第一个参数就是创建的div标签；第二个参数传了一个对象，对象里面可以是我们组件上面的props，或者是事件之类的东西；第三个参数就是div标签里面的内容，这里我们指向了data里面的text。")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("使用render函数的结果和我们之前使用"),a("code",[e._v("template")]),e._v("解析出来的结果是一样的。"),a("code",[e._v("render")]),e._v("函数是发生在"),a("code",[e._v("beforeMount")]),e._v("和"),a("code",[e._v("mounted")]),e._v("之间的，这也从侧面说明了，在"),a("code",[e._v("beforeMount")]),e._v("的时候，"),a("code",[e._v("$el")]),e._v("还只是我们在HTML里面写的节点，然后到"),a("code",[e._v("mounted")]),e._v("的时候，它就把渲染出来的内容挂载到了"),a("code",[e._v("DOM")]),e._v("节点上。这中间的过程其实是执行了"),a("code",[e._v("render function")]),e._v("的内容。")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[e._v("在使用"),a("code",[e._v(".vue")]),e._v("文件开发的过程当中，我们在里面写了"),a("code",[e._v("template")]),e._v("模板，在经过了"),a("code",[e._v("vue-loader")]),e._v("的处理之后，就变成了"),a("code",[e._v("render function")]),e._v("，最终放到了"),a("code",[e._v("vue-loader")]),e._v("解析过的文件里面。这样做有什么好处呢？原因是由于在解析"),a("code",[e._v("template")]),e._v("变成"),a("code",[e._v("render function")]),e._v("的过程，是一个非常耗时的过程，"),a("code",[e._v("vue-loader")]),e._v("帮我们处理了这些内容之后，当我们在页面上执行"),a("code",[e._v("vue")]),e._v("代码的时候，效率会变得更高。")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",[a("code",[e._v("beforeMount")]),e._v("在有了"),a("code",[e._v("render function")]),e._v("的时候才会执行，当执行完"),a("code",[e._v("render function")]),e._v("之后，就会调用"),a("code",[e._v("mounted")]),e._v("这个钩子，在"),a("code",[e._v("mounted")]),e._v("挂载完毕之后，这个实例就算是走完流程了。\n后续的钩子函数执行的过程都是需要外部的触发才会执行。比如说有数据的变化，会调用"),a("code",[e._v("beforeUpdate")]),e._v("，然后经过"),a("code",[e._v("Virtual DOM")]),e._v("，最后"),a("code",[e._v("updated")]),e._v("更新完毕。当组件被销毁的时候，它会调用"),a("code",[e._v("beforeDestory")]),e._v("，以及"),a("code",[e._v("destoryed")]),e._v("。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"生命周期的钩子-lifecyclehook"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生命周期的钩子-lifecyclehook","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期的钩子 (lifecyclehook)")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("table",[a("thead",[a("tr",[a("th",[e._v("生命周期中的钩子函数")]),e._v(" "),a("th",[e._v("组建状态")]),e._v(" "),a("th",[e._v("最佳实践")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("beforeCreate")]),e._v(" "),a("td",[e._v("实例初始化之后,this指向创建的实例，此时还不能访问到"),a("code",[e._v("data")]),e._v(","),a("code",[e._v("computed")]),e._v(","),a("code",[e._v("watch")]),e._v(","),a("code",[e._v("methods")]),e._v("上的数据和方法")]),e._v(" "),a("td",[e._v("常用于初始化非响应式变量")])]),e._v(" "),a("tr",[a("td",[e._v("created")]),e._v(" "),a("td",[e._v("实例创建完成，可以访问到 "),a("code",[e._v("data")]),e._v(","),a("code",[e._v("computed")]),e._v(","),a("code",[e._v("watch")]),e._v(","),a("code",[e._v("methods")]),e._v("上的数据和方法，未挂载到dom 上，不能访问"),a("code",[e._v("#el")]),e._v(" 属性， "),a("code",[e._v("$ref")]),e._v("属性d额内容为空数组")]),e._v(" "),a("td",[e._v("常用语简单的"),a("code",[e._v("ajax请求")]),e._v(",页面的初始化")])]),e._v(" "),a("tr",[a("td",[e._v("beforeMount")]),e._v(" "),a("td",[e._v("在挂载开始前被调用，"),a("code",[e._v("beforeMount")]),e._v("之前，会找到对应的"),a("code",[e._v("template")]),e._v("，并编译成"),a("code",[e._v("render")]),e._v("函数")]),e._v(" "),a("td",[e._v("-")])]),e._v(" "),a("tr",[a("td",[e._v("mounted")]),e._v(" "),a("td",[e._v("实例挂载到DOM上，此时可以通过"),a("code",[e._v("DOM API")]),e._v(" 获取到"),a("code",[e._v("DOM")]),e._v(" 节点，"),a("code",[e._v("$ref")]),e._v(" 属性可以访问")]),e._v(" "),a("td",[e._v("常用于获取vnode信息和操作，"),a("code",[e._v("ajax")]),e._v("请求")])]),e._v(" "),a("tr",[a("td",[e._v("beforeUpdate")]),e._v(" "),a("td",[e._v("响应式数据更新时调用，发生在虚拟DOM打补丁之前")]),e._v(" "),a("td",[e._v("适合在更新之前访问现有的DOM，比如手动移除已添加的事件监听器")])]),e._v(" "),a("tr",[a("td",[e._v("updated")]),e._v(" "),a("td",[e._v("虚拟DOM重新渲染和打补丁之后调用，组件DOM已经更新，可执行依赖于DOM的操作")]),e._v(" "),a("td",[e._v("避免在这个钩子函数中操作数据，可能陷入死循环")])]),e._v(" "),a("tr",[a("td",[e._v("beforeDestroy")]),e._v(" "),a("td",[e._v("实例销毁之前调用。这一步，实力任然完全可用，"),a("code",[e._v("this")]),e._v("仍能获取到实例")]),e._v(" "),a("td",[e._v("常用于销毁定时器，解绑迁居时间，销毁插件对象等操作")])]),e._v(" "),a("tr",[a("td",[e._v("destroyed")]),e._v(" "),a("td",[e._v("实力销毁后调用，调用后，Vue实例只是的所有东西都会解绑，所有的事件监听器会被移除，所有的姿势里也会被销毁")]),e._v(" "),a("td",[e._v("在此也可以用于销毁定时器")])]),e._v(" "),a("tr",[a("td"),e._v(" "),a("td"),e._v(" "),a("td")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("p",[this._v("created阶段的"),t("code",[this._v("ajax")]),this._v("请求与"),t("code",[this._v("mounted")]),this._v("请求的区别：前者页面视图未出现，如果请求信息过多，页面会长时间处于白屏状态，此时如果做"),t("code",[this._v("DOM")]),this._v("请求时会报错,页面还没有渲染出来")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[a("code",[e._v("beforeCreate")]),e._v("，"),a("code",[e._v("created")]),e._v("，"),a("code",[e._v("beforeMount")]),e._v("，"),a("code",[e._v("mounted")]),e._v(" 是自动被调用")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[a("code",[e._v("beforeUpdate")]),e._v(", "),a("code",[e._v("updated")]),e._v(","),a("code",[e._v("beforeDestroy")]),e._v(","),a("code",[e._v("destroyed")]),e._v(" 是手动调用")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("子组件的"),a("code",[e._v("created")]),e._v(" 优先于父组件的"),a("code",[e._v("created")]),e._v(" 执行， 父组件的"),a("code",[e._v("beforeCreate")]),e._v(" 优先于子组件的"),a("code",[e._v("beforeCreate")])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("子组件的"),a("code",[e._v("mounted")]),e._v("优先于父组件的"),a("code",[e._v("mounted")]),e._v("， 父组件的"),a("code",[e._v("beforeMount")]),e._v(" 优先于子组件的 "),a("code",[e._v("beforeMount")])])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("p",[e._v("子组件的"),a("code",[e._v("destroyed")]),e._v("优先于父组件的"),a("code",[e._v("beforeDestroy")]),e._v("， 父组件的"),a("code",[e._v("beforeDestroy")]),e._v(" 优先于子组件的 "),a("code",[e._v("beforeDestroy")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"activated-deactivated"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#activated-deactivated","aria-hidden":"true"}},[this._v("#")]),this._v(" activated & deactivated")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("最后还有 两个钩子函数没显示：activated & deactivated\n使用"),t("code",[this._v("<keep-alive>")]),this._v("会将数据保留在内存中，如果要在每次进入页面的时候获取最新的数据，需要在activated阶段获取数据，承担原来created钩子中获取数据的任务")])},function(){var e=this.$createElement,t=this._self._c||e;return t("ul",[t("li",[t("p",[this._v("activated： 在组件被激活时调用，在组件第一次渲染时也会被调用，之后每次keep-alive激活时被调用，该钩子在服务器端渲染期间不被调用。")])]),this._v(" "),t("li",[t("p",[this._v("deactivated： keep-alive组件停用时调用。该钩子在服务端渲染期间不被调用。")]),this._v(" "),t("p",[this._v("组件内的离开当前路由钩子beforeRouteLeave =>  路由前置守卫 beforeEach =>\n全局后置钩子afterEach => deactivated 离开缓存组件 => activated 进入缓存组件(如果你进入的也是缓存路由)\n// 如果离开的组件没有缓存的话 beforeDestroy会替换deactivated\n// 如果进入的路由也没有缓存的话  全局后置钩子afterEach=>销毁 destroyed=> beforeCreate等")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"路由导航守卫"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#路由导航守卫","aria-hidden":"true"}},[this._v("#")]),this._v(" 路由导航守卫")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"遗留问题："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遗留问题：","aria-hidden":"true"}},[this._v("#")]),this._v(" 遗留问题：")])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ul",[a("li",[a("p",[e._v("兄弟组件通过bus传值时的updated，beforeUpdate 生命周期顺序"),a("br"),e._v("\n如果是通过父级派发更新事件时，beforeUpdate，和updated的顺序 都是自上到下正常顺序进行；"),a("br"),e._v("\n如果是兄弟组件的派发顺序是beforeUpdate是从上到下，updated 的顺序是从下到上的更新顺序")])]),e._v(" "),a("li",[a("p",[e._v("beforeCreate 有什么具体实际的用处，例举"),a("br"),e._v("\nvue生命周期中 beforeCreate 是实例初始化完成后数据观测（data observer）和event/watcher之前被调用。")]),e._v(" "),a("p",[e._v("在beforeCreate前，所有的options都会先存到vm.$options中，在beforeCreate之后，将$options里的data啦，props啦，methods啦等等一个个附到vm上，然后再触发created钩子。所以在beforeCreate的时候，通过this.message是拿不到值的，在created的时候就能通过this.message拿到值了。")]),e._v(" "),a("p",[e._v('一定要在beforeCreate的时候就同步去拿data里的值的话，就是直接从this.$options.data里去拿。如果data中的初始值是简单的string，那直接this.$options.data()["message"]就好.涉及到复杂点的情况，建议看看源码里是怎么处理的，具体在core/instance/state.js中的initData(vm)里。\n还有一种方法 可以使用nextTick()，相当于做个延迟，等页面挂载完后在执行\n使用promise')]),e._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[e._v("let")]),e._v(" "),a("span",{attrs:{class:"token constant"}},[e._v("F")]),e._v(" "),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{attrs:{class:"token keyword"}},[e._v("null")]),a("span",{attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{attrs:{class:"token keyword"}},[e._v("export")]),e._v(" "),a("span",{attrs:{class:"token keyword"}},[e._v("default")]),e._v(" "),a("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{attrs:{class:"token comment"}},[e._v("//...")]),e._v("\n    "),a("span",{attrs:{class:"token function"}},[e._v("data")]),a("span",{attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),a("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            dataList"),a("span",{attrs:{class:"token punctuation"}},[e._v(":")]),a("span",{attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{attrs:{class:"token function"}},[e._v("beforeCreate")]),a("span",{attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{attrs:{class:"token constant"}},[e._v("F")]),e._v(" "),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{attrs:{class:"token function"}},[e._v("fetchData")]),a("span",{attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{attrs:{class:"token comment"}},[e._v("//fetchData是取数方法")]),e._v("\n            "),a("span",{attrs:{class:"token comment"}},[e._v("//...返回promise")]),e._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{attrs:{class:"token function"}},[e._v("created")]),a("span",{attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{attrs:{class:"token constant"}},[e._v("F")]),a("span",{attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{attrs:{class:"token function"}},[e._v("then")]),a("span",{attrs:{class:"token punctuation"}},[e._v("(")]),e._v("data"),a("span",{attrs:{class:"token operator"}},[e._v("=>")]),a("span",{attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{attrs:{class:"token keyword"}},[e._v("this")]),a("span",{attrs:{class:"token punctuation"}},[e._v(".")]),e._v("dataList "),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v(" data\n        "),a("span",{attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("本人理解其中原因就是一个实例初始化后的提示功能，表示此后要开始")])])])}],!1,null,null,null);_.options.__file="index.md";t.default=_.exports}}]);
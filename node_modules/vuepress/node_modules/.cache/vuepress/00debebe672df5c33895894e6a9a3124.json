{"remainingRequest":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\WWW\\GitHub\\Vue-analysis\\docs\\vuex\\index.md?vue&type=template&id=4aca6792&","dependencies":[{"path":"D:\\WWW\\GitHub\\Vue-analysis\\docs\\vuex\\index.md","mtime":1541345577881},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541330558999},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1541330613225},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541330558999},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js","mtime":1541330613223},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1541330618009}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"content\" }, [\n    _vm._m(0),\n    _vm._v(\" \"),\n    _vm._m(1),\n    _vm._v(\" \"),\n    _c(\"hr\"),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"如果你在使用Vue.js，肯定有很多组件之间相互传递参数的经历。当遇到父子组件需要通信的时候，我们通常会采用 props + emit 这种方式。但当通信双方不是父子组件甚至压根不存在相关联系，或者一个状态需要共享给多个组件时，就会非常麻烦，数据也会相当难维护。其实除了传递参数的方式，我们还可以结合业务需要考虑是否用Vuex去解决。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(2),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\"Vuex 是一个专为 Vue.js 应用程序开发的\"),\n      _c(\"code\", [_vm._v(\"状态管理模式\")]),\n      _vm._v(\n        \"。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 \"\n      ),\n      _c(\n        \"a\",\n        {\n          attrs: {\n            href: \"https://github.com/vuejs/vue-devtools\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }\n        },\n        [_vm._v(\"devtools extension\"), _c(\"OutboundLink\")],\n        1\n      ),\n      _vm._v(\n        \"，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(3),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"我们从一个简单的技术demo来看\")]),\n    _vm._v(\" \"),\n    _vm._m(4),\n    _c(\"p\", [_vm._v(\"这个状态自管理应用包含以下几个部分：\")]),\n    _vm._v(\" \"),\n    _vm._m(5),\n    _vm._v(\" \"),\n    _c(\"p\", [_vm._v(\"以下是一个表示“单向数据流”理念的极简示意：\")]),\n    _vm._v(\" \"),\n    _vm._m(6),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"但是，当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏：\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(7),\n    _vm._v(\" \"),\n    _vm._m(8),\n    _vm._v(\" \"),\n    _vm._m(9),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，我们的代码将会变得更结构化且易维护。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\"这就是 Vuex 背后的基本思想，借鉴了 \"),\n      _c(\n        \"a\",\n        {\n          attrs: {\n            href: \"https://facebook.github.io/flux/docs/overview.html\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }\n        },\n        [_vm._v(\"Flux\"), _c(\"OutboundLink\")],\n        1\n      ),\n      _vm._v(\"、\"),\n      _c(\n        \"a\",\n        {\n          attrs: {\n            href: \"http://redux.js.org/\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }\n        },\n        [_vm._v(\"Redux\"), _c(\"OutboundLink\")],\n        1\n      ),\n      _vm._v(\"、和 \"),\n      _c(\n        \"a\",\n        {\n          attrs: {\n            href: \"https://guide.elm-lang.org/architecture/\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }\n        },\n        [_vm._v(\"The Elm Architecture\"), _c(\"OutboundLink\")],\n        1\n      ),\n      _vm._v(\n        \"。与其他模式不同的是，Vuex 是专门为 Vue.js 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(10),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"简而言之：Vuex 相当于某种意义上设置了读写权限的全局变量，将数据保存保存到该“全局变量”下，并通过一定的方法去读写数据。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(11),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"虽然 Vuex 可以帮助我们管理共享状态，但也附带了更多的概念和框架。这需要对短期和长期效益进行权衡。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _vm._v(\n        \"如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 \"\n      ),\n      _c(\n        \"a\",\n        {\n          attrs: {\n            href:\n              \"https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }\n        },\n        [_vm._v(\"store\"), _c(\"OutboundLink\")],\n        1\n      ),\n      _vm._v(\n        \" 模式就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。\"\n      )\n    ]),\n    _vm._v(\" \"),\n    _vm._m(12),\n    _vm._v(\" \"),\n    _c(\"p\", [\n      _c(\n        \"a\",\n        {\n          attrs: {\n            href: \"https://vuex.vuejs.org/zh/\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }\n        },\n        [_vm._v(\"Vuex\"), _c(\"OutboundLink\")],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"a\",\n        {\n          attrs: {\n            href:\n              \"https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87-Prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE\",\n            target: \"_blank\",\n            rel: \"noopener noreferrer\"\n          }\n        },\n        [_vm._v(\"prop\"), _c(\"OutboundLink\")],\n        1\n      )\n    ])\n  ])\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h1\", { attrs: { id: \"vuex\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#vuex\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" Vuex\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [\n        _c(\"p\", [_vm._v(\"研究方向\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [_c(\"li\", [_vm._v(\"state prop机制\")])])\n      ]),\n      _vm._v(\" \"),\n      _c(\"li\", [\n        _c(\"p\", [_vm._v(\"研究方法\")]),\n        _vm._v(\" \"),\n        _c(\"ul\", [\n          _c(\"li\", [_vm._v(\"vuex主要解决什么问题，如果不用vuex如何解决，\")]),\n          _vm._v(\" \"),\n          _c(\"li\", [\n            _vm._v(\"vuex如何管理state prop; state prop分别来处理什么内容？\")\n          ])\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"vuex-认识\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#vuex-认识\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" vuex 认识\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h2\", { attrs: { id: \"什么是“状态管理模式”？\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#什么是“状态管理模式”？\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 什么是“状态管理模式”？\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"language-javascript extra-class\" }, [\n      _c(\"pre\", { pre: true, attrs: { class: \"language-javascript\" } }, [\n        _c(\"code\", [\n          _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"new\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token class-name\" } }, [_vm._v(\"Vue\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"{\")]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"//state\")\n          ]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [_vm._v(\"data\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"{\")]),\n          _vm._v(\"\\n    \"),\n          _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"return\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"{\")]),\n          _vm._v(\"\\n      count\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\":\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token number\" } }, [_vm._v(\"0\")]),\n          _vm._v(\"\\n    \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"}\")]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"}\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\",\")]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [_vm._v(\"//view\")]),\n          _vm._v(\"\\n  template\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\":\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token template-string\" } }, [\n            _c(\"span\", { attrs: { class: \"token string\" } }, [\n              _vm._v(\"`\\n  <div>{{count}}</div>\\n  `\")\n            ])\n          ]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\",\")]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { attrs: { class: \"token comment\" } }, [\n            _vm._v(\"//actions\")\n          ]),\n          _vm._v(\"\\n  methods\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\":\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"{\")]),\n          _vm._v(\"\\n    \"),\n          _c(\"span\", { attrs: { class: \"token function\" } }, [\n            _vm._v(\"increment\")\n          ]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"(\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\" \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"{\")]),\n          _vm._v(\"\\n      \"),\n          _c(\"span\", { attrs: { class: \"token keyword\" } }, [_vm._v(\"this\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\".\")]),\n          _vm._v(\"count\"),\n          _c(\"span\", { attrs: { class: \"token operator\" } }, [_vm._v(\"++\")]),\n          _vm._v(\"\\n    \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"}\")]),\n          _vm._v(\"\\n  \"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"}\")]),\n          _vm._v(\"\\n\"),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\"}\")]),\n          _c(\"span\", { attrs: { class: \"token punctuation\" } }, [_vm._v(\")\")]),\n          _vm._v(\"\\n\")\n        ])\n      ])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_vm._v(\"state，驱动应用的数据源；\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_vm._v(\"view，以声明方式将 state 映射到视图；\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_vm._v(\"actions，响应在 view 上的用户输入导致的状态变化。\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"img\", {\n        attrs: {\n          src: \"/Vue-analysis/assets/vue-zhuangtai.png\",\n          alt: \"单向数据流\"\n        }\n      })\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"ul\", [\n      _c(\"li\", [_vm._v(\"多个视图依赖于同一状态。\")]),\n      _vm._v(\" \"),\n      _c(\"li\", [_vm._v(\"来自不同视图的行为需要变更同一状态。\")])\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\n        \"对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。\"\n      ),\n      _c(\"br\"),\n      _vm._v(\n        \"\\n对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。\"\n      )\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _vm._v(\"因此，我们可以把组件的共享状态抽取出来，以一个\"),\n      _c(\"code\", [_vm._v(\"全局单例模式\")]),\n      _vm._v(\"管理;在这种模式下,我们组件树构成一个巨大的\"),\n      _c(\"code\", [_vm._v(\"“视图”\")]),\n      _vm._v(\n        \"，不管我们在处于输的那一层，或者任何组件都可以获取到状态,或者触发行为。\"\n      )\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"p\", [\n      _c(\"img\", {\n        attrs: { src: \"/Vue-analysis/assets/vuex-01.png\", alt: \"vuex\" }\n      })\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h1\", { attrs: { id: \"什么情况下我们应该使用vuex？\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: {\n            href: \"#什么情况下我们应该使用vuex？\",\n            \"aria-hidden\": \"true\"\n          }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 什么情况下我们应该使用vuex？\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"h1\", { attrs: { id: \"参考\" } }, [\n      _c(\n        \"a\",\n        {\n          staticClass: \"header-anchor\",\n          attrs: { href: \"#参考\", \"aria-hidden\": \"true\" }\n        },\n        [_vm._v(\"#\")]\n      ),\n      _vm._v(\" 参考\")\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}
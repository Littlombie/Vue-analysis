{"remainingRequest":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\WWW\\GitHub\\Vue-analysis\\docs\\vuex\\index.md?vue&type=template&id=670a5ef2&","dependencies":[{"path":"D:\\WWW\\GitHub\\Vue-analysis\\docs\\vuex\\index.md","mtime":1541781854061},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541781859732},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1541781890915},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541781859732},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js","mtime":1541781890913},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1541781893804}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"vuex\\\"><a href=\\\"#vuex\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Vuex</h1> <ul><li><p>研究方向</p> <ul><li>state prop机制</li></ul></li> <li><p>研究方法</p> <ul><li>vuex主要解决什么问题，如果不用vuex如何解决，</li> <li>vuex如何管理state prop; state prop分别来处理什么内容？</li></ul></li></ul> <hr> <p>如果你在使用Vue.js，肯定有很多组件之间相互传递参数的经历。当遇到父子组件需要通信的时候，我们通常会采用 props + emit 这种方式。但当通信双方不是父子组件甚至压根不存在相关联系，或者一个状态需要共享给多个组件时，就会非常麻烦，数据也会相当难维护。其实除了传递参数的方式，我们还可以结合业务需要考虑是否用Vuex去解决。</p> <h2 id=\\\"vuex-认识\\\"><a href=\\\"#vuex-认识\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> vuex 认识</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"Vuex 是一个专为 Vue.js 应用程序开发的<code>状态管理模式</code>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 \"),_vm._ssrNode(\"<a href=\\\"https://github.com/vuejs/vue-devtools\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"devtools extension\"),_c('OutboundLink')],2),_vm._ssrNode(\"，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。\")],2),_vm._ssrNode(\" <h2 id=\\\"什么是“状态管理模式”？\\\"><a href=\\\"#什么是“状态管理模式”？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 什么是“状态管理模式”？</h2> <p>我们从一个简单的技术demo来看</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//state</span>\\n  <span class=\\\"token function\\\">data</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n      count<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">0</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">//view</span>\\n  template<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`\\n  &lt;div&gt;{{count}}&lt;/div&gt;\\n  `</span></span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">//actions</span>\\n  methods<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">increment</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token operator\\\">++</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>这个状态自管理应用包含以下几个部分：</p> <ul><li>state，驱动应用的数据源；</li> <li>view，以声明方式将 state 映射到视图；</li> <li>actions，响应在 view 上的用户输入导致的状态变化。</li></ul> <p>以下是一个表示“单向数据流”理念的极简示意：</p> <p><img src=\\\"/Vue-analysis/assets/vue-zhuangtai.png\\\" alt=\\\"单向数据流\\\"></p> <p>但是，当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏：</p> <ul><li>多个视图依赖于同一状态。</li> <li>来自不同视图的行为需要变更同一状态。</li></ul> <p>对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。<br>\\n对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</p> <p>因此，我们可以把组件的共享状态抽取出来，以一个<code>全局单例模式</code>管理;在这种模式下,我们组件树构成一个巨大的<code>“视图”</code>，不管我们在处于输的那一层，或者任何组件都可以获取到状态,或者触发行为。</p> <p>另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，我们的代码将会变得更结构化且易维护。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"这就是 Vuex 背后的基本思想，借鉴了 \"),_vm._ssrNode(\"<a href=\\\"https://facebook.github.io/flux/docs/overview.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Flux\"),_c('OutboundLink')],2),_vm._ssrNode(\"、\"),_vm._ssrNode(\"<a href=\\\"http://redux.js.org/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Redux\"),_c('OutboundLink')],2),_vm._ssrNode(\"、和 \"),_vm._ssrNode(\"<a href=\\\"https://guide.elm-lang.org/architecture/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"The Elm Architecture\"),_c('OutboundLink')],2),_vm._ssrNode(\"。与其他模式不同的是，Vuex 是专门为 Vue.js 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。\")],2),_vm._ssrNode(\" <p><img src=\\\"/Vue-analysis/assets/vuex1.png\\\" alt=\\\"vuex\\\"></p> <p>简而言之：Vuex 相当于某种意义上设置了读写权限的全局变量，将数据保存保存到该“全局变量”下，并通过一定的方法去读写数据。</p> <h1 id=\\\"什么情况下我们应该使用vuex？\\\"><a href=\\\"#什么情况下我们应该使用vuex？\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 什么情况下我们应该使用vuex？</h1> <p>虽然 Vuex 可以帮助我们管理共享状态，但也附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 \"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"store\"),_c('OutboundLink')],2),_vm._ssrNode(\" 模式就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。\")],2),_vm._ssrNode(\" <h1 id=\\\"参考\\\"><a href=\\\"#参考\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 参考</h1> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://vuex.vuejs.org/zh/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vuex\"),_c('OutboundLink')],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87-Prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"prop\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}
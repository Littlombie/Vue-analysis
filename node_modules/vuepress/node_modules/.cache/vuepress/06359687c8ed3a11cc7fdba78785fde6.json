{"remainingRequest":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\default-theme\\Page.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\default-theme\\Page.vue","mtime":1541435391713},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541435337147},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\babel-loader\\lib\\index.js","mtime":1541435336746},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541435337147},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js","mtime":1541435390562}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { resolvePage, normalize, outboundRE, endingSlashRE } from './util'\r\n\r\nexport default {\r\n  props: ['sidebarItems'],\r\n\r\n  computed: {\r\n    lastUpdated () {\r\n      if (this.$page.lastUpdated) {\r\n        return new Date(this.$page.lastUpdated).toLocaleString(this.$lang)\r\n      }\r\n    },\r\n\r\n    lastUpdatedText () {\r\n      if (typeof this.$themeLocaleConfig.lastUpdated === 'string') {\r\n        return this.$themeLocaleConfig.lastUpdated\r\n      }\r\n      if (typeof this.$site.themeConfig.lastUpdated === 'string') {\r\n        return this.$site.themeConfig.lastUpdated\r\n      }\r\n      return 'Last Updated'\r\n    },\r\n\r\n    prev () {\r\n      const prev = this.$page.frontmatter.prev\r\n      if (prev === false) {\r\n        return\r\n      } else if (prev) {\r\n        return resolvePage(this.$site.pages, prev, this.$route.path)\r\n      } else {\r\n        return resolvePrev(this.$page, this.sidebarItems)\r\n      }\r\n    },\r\n\r\n    next () {\r\n      const next = this.$page.frontmatter.next\r\n      if (next === false) {\r\n        return\r\n      } else if (next) {\r\n        return resolvePage(this.$site.pages, next, this.$route.path)\r\n      } else {\r\n        return resolveNext(this.$page, this.sidebarItems)\r\n      }\r\n    },\r\n\r\n    editLink () {\r\n      if (this.$page.frontmatter.editLink === false) {\r\n        return\r\n      }\r\n      const {\r\n        repo,\r\n        editLinks,\r\n        docsDir = '',\r\n        docsBranch = 'master',\r\n        docsRepo = repo\r\n      } = this.$site.themeConfig\r\n\r\n      let path = normalize(this.$page.path)\r\n      if (endingSlashRE.test(path)) {\r\n        path += 'README.md'\r\n      } else {\r\n        path += '.md'\r\n      }\r\n      if (docsRepo && editLinks) {\r\n        return this.createEditLink(repo, docsRepo, docsDir, docsBranch, path)\r\n      }\r\n    },\r\n\r\n    editLinkText () {\r\n      return (\r\n        this.$themeLocaleConfig.editLinkText ||\r\n        this.$site.themeConfig.editLinkText ||\r\n        `Edit this page`\r\n      )\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    createEditLink (repo, docsRepo, docsDir, docsBranch, path) {\r\n      const bitbucket = /bitbucket.org/\r\n      if (bitbucket.test(repo)) {\r\n        const base = outboundRE.test(docsRepo)\r\n          ? docsRepo\r\n          : repo\r\n        return (\r\n          base.replace(endingSlashRE, '') +\r\n           `/${docsBranch}` +\r\n           (docsDir ? '/' + docsDir.replace(endingSlashRE, '') : '') +\r\n           path +\r\n           `?mode=edit&spa=0&at=${docsBranch}&fileviewer=file-view-default`\r\n        )\r\n      }\r\n\r\n      const base = outboundRE.test(docsRepo)\r\n        ? docsRepo\r\n        : `https://github.com/${docsRepo}`\r\n\r\n      return (\r\n        base.replace(endingSlashRE, '') +\r\n        `/edit/${docsBranch}` +\r\n        (docsDir ? '/' + docsDir.replace(endingSlashRE, '') : '') +\r\n        path\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nfunction resolvePrev (page, items) {\r\n  return find(page, items, -1)\r\n}\r\n\r\nfunction resolveNext (page, items) {\r\n  return find(page, items, 1)\r\n}\r\n\r\nfunction find (page, items, offset) {\r\n  const res = []\r\n  items.forEach(item => {\r\n    if (item.type === 'group') {\r\n      res.push(...item.children || [])\r\n    } else {\r\n      res.push(item)\r\n    }\r\n  })\r\n  for (let i = 0; i < res.length; i++) {\r\n    const cur = res[i]\r\n    if (cur.type === 'page' && cur.path === page.path) {\r\n      return res[i + offset]\r\n    }\r\n  }\r\n}\r\n",null]}
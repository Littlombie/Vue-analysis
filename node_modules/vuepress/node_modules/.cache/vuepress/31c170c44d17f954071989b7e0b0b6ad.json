{"remainingRequest":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\WWW\\GitHub\\Vue-analysis\\docs\\vuex\\index.md?vue&type=template&id=4aca6792&","dependencies":[{"path":"D:\\WWW\\GitHub\\Vue-analysis\\docs\\vuex\\index.md","mtime":1541347542321},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541347546517},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1541347592396},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541347546517},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js","mtime":1541347592392},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1541347594857}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"vuex\"><a class=\"header-anchor\" href=\"#vuex\" aria-hidden=\"true\">#</a> Vuex</h1>\n<ul>\n<li>\n<p>研究方向</p>\n<ul>\n<li>state prop机制</li>\n</ul>\n</li>\n<li>\n<p>研究方法</p>\n<ul>\n<li>vuex主要解决什么问题，如果不用vuex如何解决，</li>\n<li>vuex如何管理state prop; state prop分别来处理什么内容？</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>如果你在使用Vue.js，肯定有很多组件之间相互传递参数的经历。当遇到父子组件需要通信的时候，我们通常会采用 props + emit 这种方式。但当通信双方不是父子组件甚至压根不存在相关联系，或者一个状态需要共享给多个组件时，就会非常麻烦，数据也会相当难维护。其实除了传递参数的方式，我们还可以结合业务需要考虑是否用Vuex去解决。</p>\n<h2 id=\"vuex-认识\"><a class=\"header-anchor\" href=\"#vuex-认识\" aria-hidden=\"true\">#</a> vuex 认识</h2>\n<p>Vuex 是一个专为 Vue.js 应用程序开发的<code>状态管理模式</code>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。Vuex 也集成到 Vue 的官方调试工具 <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener noreferrer\">devtools extension<OutboundLink/></a>，提供了诸如零配置的 time-travel 调试、状态快照导入导出等高级调试功能。</p>\n<h2 id=\"什么是“状态管理模式”？\"><a class=\"header-anchor\" href=\"#什么是“状态管理模式”？\" aria-hidden=\"true\">#</a> 什么是“状态管理模式”？</h2>\n<p>我们从一个简单的技术demo来看</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//state</span>\n  <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//view</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`\n  &lt;div>{{count}}&lt;/div>\n  `</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//actions</span>\n  methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这个状态自管理应用包含以下几个部分：</p>\n<ul>\n<li>state，驱动应用的数据源；</li>\n<li>view，以声明方式将 state 映射到视图；</li>\n<li>actions，响应在 view 上的用户输入导致的状态变化。</li>\n</ul>\n<p>以下是一个表示“单向数据流”理念的极简示意：</p>\n<p><img src=\"/Vue-analysis/assets/vue-zhuangtai.png\" alt=\"单向数据流\"></p>\n<p>但是，当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏：</p>\n<ul>\n<li>多个视图依赖于同一状态。</li>\n<li>来自不同视图的行为需要变更同一状态。</li>\n</ul>\n<p>对于问题一，传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力。<br>\n对于问题二，我们经常会采用父子组件直接引用或者通过事件来变更和同步状态的多份拷贝。以上的这些模式非常脆弱，通常会导致无法维护的代码。</p>\n<p>因此，我们可以把组件的共享状态抽取出来，以一个<code>全局单例模式</code>管理;在这种模式下,我们组件树构成一个巨大的<code>“视图”</code>，不管我们在处于输的那一层，或者任何组件都可以获取到状态,或者触发行为。</p>\n<p>另外，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，我们的代码将会变得更结构化且易维护。</p>\n<p>这就是 Vuex 背后的基本思想，借鉴了 <a href=\"https://facebook.github.io/flux/docs/overview.html\" target=\"_blank\" rel=\"noopener noreferrer\">Flux<OutboundLink/></a>、<a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Redux<OutboundLink/></a>、和 <a href=\"https://guide.elm-lang.org/architecture/\" target=\"_blank\" rel=\"noopener noreferrer\">The Elm Architecture<OutboundLink/></a>。与其他模式不同的是，Vuex 是专门为 Vue.js 设计的状态管理库，以利用 Vue.js 的细粒度数据响应机制来进行高效的状态更新。</p>\n<p><img src=\"/Vue-analysis/assets/vuex1.png\" alt=\"vuex\"></p>\n<p>简而言之：Vuex 相当于某种意义上设置了读写权限的全局变量，将数据保存保存到该“全局变量”下，并通过一定的方法去读写数据。</p>\n<h1 id=\"什么情况下我们应该使用vuex？\"><a class=\"header-anchor\" href=\"#什么情况下我们应该使用vuex？\" aria-hidden=\"true\">#</a> 什么情况下我们应该使用vuex？</h1>\n<p>虽然 Vuex 可以帮助我们管理共享状态，但也附带了更多的概念和框架。这需要对短期和长期效益进行权衡。</p>\n<p>如果您不打算开发大型单页应用，使用 Vuex 可能是繁琐冗余的。确实是如此——如果您的应用够简单，您最好不要使用 Vuex。一个简单的 <a href=\"https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8\" target=\"_blank\" rel=\"noopener noreferrer\">store<OutboundLink/></a> 模式就足够您所需了。但是，如果您需要构建一个中大型单页应用，您很可能会考虑如何更好地在组件外部管理状态，Vuex 将会成为自然而然的选择。</p>\n<h1 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\" aria-hidden=\"true\">#</a> 参考</h1>\n<p><a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">Vuex<OutboundLink/></a>\n<a href=\"https://cn.vuejs.org/v2/guide/components.html#%E9%80%9A%E8%BF%87-Prop-%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE\" target=\"_blank\" rel=\"noopener noreferrer\">prop<OutboundLink/></a></p>\n</div>\n",null]}
{"remainingRequest":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\WWW\\GitHub\\Vue-analysis\\docs\\render\\index.md?vue&type=template&id=10bcf26e&","dependencies":[{"path":"D:\\WWW\\GitHub\\Vue-analysis\\docs\\render\\index.md","mtime":1540716302271},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540716305167},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1540716351147},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1540716305167},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js","mtime":1540716351142},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1540716355267}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"render\\\"><a href=\\\"#render\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> render</h1> <ul><li><p>研究方向</p> <ul><li>render机制</li></ul></li> <li><p>研究方法</p> <ul><li>条件渲染、列表渲染、update、模板、服务器渲染、渲染性能，如何编译，ast是什么</li></ul></li></ul> <hr> <h2 id=\\\"web页面渲染分四种方式\\\"><a href=\\\"#web页面渲染分四种方式\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> web页面渲染分四种方式</h2> \"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>后端模板渲染：\\n<ul><li>指使用PHP等后端语言来生成页面，通常情况下，需要后端配合，混合项目开发。以前项目都这样搞，缺点大于优点</li></ul></li> <li>客户端渲染：\\n<ul><li>指使用 JS 来渲染页面大部分内容，后端资源都是通过ajax请求数据来渲染。代表是现在流行的 SPA 单页面应用；</li></ul></li> \"),_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"node中间层：\\n\"),_vm._ssrNode(\"<ul>\",\"</ul>\",[_vm._ssrNode(\"<li>\",\"</li>\",[_vm._ssrNode(\"前后端分离，但优于前端直接请求接口从而产生的一系列问题。 比如可以用PHP写后端简单的接口，Node.js封装PHP接口，前端axios请求封装后的接口，将需要的数据返回到对应的view层页面，既解决了跨域问题（Node.js作为服务端，服务端没有跨域一说），同时又不需要配后端环境，只需要一个PHP接口 \"),_vm._ssrNode(\"<a href=\\\"https://segmentfault.com/a/1190000012950302\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"详细说明\"),_c('OutboundLink')],2)],2)])],2),_vm._ssrNode(\" <li>服务端渲染（ssr）：\\n<ul><li>主要指的是ssr，在准确点说就是「同构渲染」指前后端共用 JS，首次渲染时使用 Node.js 来直出 HTML。一般来说同构渲染是介于前后端中的共有部分。</li></ul></li>\")],2),_vm._ssrNode(\" \"),_vm._ssrNode(\"<h2 id=\\\"什么是render函数-渲染函数\\\">\",\"</h2>\",[_vm._ssrNode(\"<a href=\\\"#什么是render函数-渲染函数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 什么是render函数 (\"),_vm._ssrNode(\"<a href=\\\"https://cn.vuejs.org/v2/guide/render-function.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"渲染函数\"),_c('OutboundLink')],2),_vm._ssrNode(\")\")],2),_vm._ssrNode(\" <p>Render函数是Vue2.x版本新增的一个函数；使用虚拟dom来渲染节点提升性能，因为它是基于JavaScript计算。通过使用createElement(h)来创建dom节点。createElement是render的核心方法。其Vue编译的时候会把template里面的节点解析成虚拟dom；</p> <p>vue推荐在绝大多数情况下使用template来创建我们的HTML。然而在一些场景中，我们真的需要JavaScript的完全编程的能力，这就是render函数，它比template更接近编译器。</p> <p>./template/demo1</p> <blockquote><p>在之前的Vue1.X版本中没有Virtual DOM,Vue2.0之后添加了此功能，而Virtual DOM 最后是通过<code>render</code>函数来生成模板页面<br>\\nvue  在new Vue()最后的渲染只认render 函数 所有的东西 html,template 都会编译成render函数</p></blockquote> <h2 id=\\\"createelement-参数\\\"><a href=\\\"#createelement-参数\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> createElement 参数</h2> <p>demo：</p> <div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>render (h) {\\n  return h('div', {}, this.text)\\n}\\n</code></pre></div><p><code>render</code>函数里面的传参h就是Vue里面的<code>createElement</code>方法，<code>return</code>返回一个<code>createElement</code>方法，（官方文档：返回的其实不是一个实际的 DOM 元素。它更准确的名字可能是 createNodeDescription，因为它所包含的信息会告诉 Vue 页面上需要渲染什么样的节点，及其子节点。我们把这样的节点描述为“虚拟节点 (Virtual Node)”，也常简写它为“VNode”。“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼。）</p> <p>其中可以传三个参数：</p> <ul><li>第一个参数 {String | Object | Function} 表示可以传一个 HTML 标签字符串，组件选项对象，或者解析上述任何一种的一个 async 异步函数。必需参数；</li> <li>第二个参数 {Object} 一个包含模板相关属性的数据对象，对象里面可以是我们组件上面的props，或者是事件之类的东西，你可以在 template 中使用这些特性。可选参数；<br>\\ndata的对象：<div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 和`v-bind:class`一样的 API</span>\\n  <span class=\\\"token comment\\\">// 接收一个字符串、对象或字符串和对象组成的数组</span>\\n  <span class=\\\"token string\\\">'class'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    foo<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n    bar<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 和`v-bind:style`一样的 API</span>\\n  <span class=\\\"token comment\\\">// 接收一个字符串、对象或对象组成的数组</span>\\n  style<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    color<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'red'</span><span class=\\\"token punctuation\\\">,</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'14px'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 普通的 HTML 特性</span>\\n  attrs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'foo'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 组件 props</span>\\n  props<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    myProp<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'bar'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// DOM 属性</span>\\n  domProps<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    innerHTML<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'baz'</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 事件监听器基于 `on`</span>\\n  <span class=\\\"token comment\\\">// 所以不再支持如 `v-on:keyup.enter` 修饰器</span>\\n  <span class=\\\"token comment\\\">// 需要手动匹配 keyCode。</span>\\n  on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    click<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>clickHandler\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 仅用于组件，用于监听原生事件，而不是组件内部使用</span>\\n  <span class=\\\"token comment\\\">// `vm.$emit` 触发的事件。</span>\\n  nativeOn<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    click<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>nativeClickHandler\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span>\\n  <span class=\\\"token comment\\\">// 赋值，因为 Vue 已经自动为你进行了同步。</span>\\n  directives<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n      name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'my-custom-directive'</span><span class=\\\"token punctuation\\\">,</span>\\n      value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'2'</span><span class=\\\"token punctuation\\\">,</span>\\n      expression<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'1 + 1'</span><span class=\\\"token punctuation\\\">,</span>\\n      arg<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'foo'</span><span class=\\\"token punctuation\\\">,</span>\\n      modifiers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        bar<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 作用域插槽格式</span>\\n  <span class=\\\"token comment\\\">// { name: props =&gt; VNode | Array&lt;VNode&gt; }</span>\\n  scopedSlots<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span> props <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'span'</span><span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 如果组件是其他组件的子组件，需为插槽指定名称</span>\\n  slot<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'name-of-slot'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 其他特殊顶层属性</span>\\n  key<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'myKey'</span><span class=\\\"token punctuation\\\">,</span>\\n  ref<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'myRef'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 如果你在渲染函数中向多个元素都应用了相同的 ref 名，</span>\\n  <span class=\\\"token comment\\\">// 那么 `$refs.myRef` 会变成一个数组。</span>\\n  refInFor<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div></li> <li>第三个参数 {String | Array} 子虚拟节点 (VNodes)，由 <code>createElement()</code> 构建而成， 也可以使用字符串来生成“文本虚拟节点”。可选参数。\\n如：<div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>  <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">'先写一些文字'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'h1'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'一则头条'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>MyComponent<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n      props<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        someProp<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'foobar'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">]</span>\\n</code></pre></div></li></ul> <p>使用render函数的结果和我们之前使用<code>template</code>解析出来的结果是一样的。<code>render</code>函数是发生在<code>beforeMount</code>和<code>mounted</code>之间的，这也从侧面说明了，在<code>beforeMount</code>的时候，<code>$el</code>还只是我们在HTML里面写的节点，然后到<code>mounted</code>的时候，它就把渲染出来的内容挂载到了<code>DOM</code>节点上。这中间的过程其实是执行了<code>render function</code>的内容。</p> <p>在使用<code>.vue</code>文件开发的过程当中，我们在里面写了<code>template</code>模板，在经过了<code>vue-loader</code>的处理之后，就变成了<code>render function</code>，最终放到了<code>vue-loader</code>解析过的文件里面。这样做有什么好处呢？原因是由于在解析<code>template</code>变成<code>render function</code>的过程，是一个非常耗时的过程，<code>vue-loader</code>帮我们处理了这些内容之后，当我们在页面上执行<code>vue</code>代码的时候，效率会变得更高。</p> <p>VNodes必须唯一\\n组件树中的所有 VNodes 必须是唯一的。这意味着，下面的 render function 是无效的：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>render<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>createElement<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> myParagraphVNode <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'hi'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token comment\\\">// 错误-重复的 VNodes</span>\\n    myParagraphVNode<span class=\\\"token punctuation\\\">,</span> myParagraphVNode\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>如果你真的需要重复很多次的元素/组件，你可以使用工厂函数来实现。例如，下面这个例子 render 函数完美有效地渲染了 20 个相同的段落：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>  render<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>createElement<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">,</span>\\n    Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> length<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">20</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'hi'</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"使用javascript-代替模板功能\\\"><a href=\\\"#使用javascript-代替模板功能\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 使用JavaScript 代替模板功能</h2> <p>只要在原生的 JavaScript 中可以轻松完成的操作，Vue 的 render 函数就不会提供专有的替代方法。比如，在 template 中使用的 v-if 和 v-for：</p> <div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>ul</span> <span class=\\\"token attr-name\\\">v-if</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>items.length<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>li</span> <span class=\\\"token attr-name\\\">v-for</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>item in items<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>{{ item.name }}<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>li</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>ul</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>p</span> <span class=\\\"token attr-name\\\">v-else</span><span class=\\\"token punctuation\\\">&gt;</span></span>No items found.<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>p</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><p>这些都会在 render 函数中被 JavaScript 的 if/else 和 map 重写：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>props<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'items'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\nrender<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>createElement<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'ul'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'li'</span><span class=\\\"token punctuation\\\">,</span> item<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'p'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'No items found.'</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>v-model<br>\\nrender 函数中没有与 v-model 的直接对应 - 你必须自己实现相应的逻辑：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>props<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'value'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\nrender<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>createElement<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> self <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n    domProps<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      value<span class=\\\"token punctuation\\\">:</span> self<span class=\\\"token punctuation\\\">.</span>value\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n      input<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        self<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">$emit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">,</span> event<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">.</span>value<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>这就是深入底层的代价，但与 v-model 相比，这可以让你更好地控制交互细节。</p> <h2 id=\\\"事件-案件修饰符\\\"><a href=\\\"#事件-案件修饰符\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 事件&amp;案件修饰符</h2> <p>对于 .passive、.capture 和 .once事件修饰符, Vue 提供了相应的前缀可以用于 on：</p> <table><thead><tr><th>Modifier(s)</th> <th>Prefix</th></tr></thead> <tbody><tr><td>.passive</td> <td>&amp;</td></tr> <tr><td>.capture</td> <td>!</td></tr> <tr><td>.once</td> <td>~</td></tr> <tr><td>.capture.once or .once.capture</td> <td>~!</td></tr></tbody></table> <p>例如:</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>  on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token string\\\">'!click'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>doThisInCapturingMode<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'~keyup'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>doThisOnce<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">'~!mouseover'</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>doThisOnceInCapturingMode\\n  <span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>对于其他的修饰符，前缀不是很重要，因为你可以在事件处理函数中使用事件方法：</p> <table><thead><tr><th>Modifier(s)</th> <th>Equivalent in Handler</th></tr></thead> <tbody><tr><td>.stop</td> <td>event.stopPropagation()</td></tr> <tr><td>.prevent</td> <td>event.preventDefault()</td></tr> <tr><td>.self</td> <td>if (event.target !== event.currentTarget) return</td></tr> <tr><td>Keys: .enter, .13</td> <td>if (event.keyCode !== 13) return (change 13 to another key code for other key modifiers)</td></tr> <tr><td>Modifiers Keys: .ctrl, .alt, .shift, .meta</td> <td>if (!event.ctrlKey) return (change ctrlKey to altKey, shiftKey, or metaKey, respectively)</td></tr></tbody></table> <p>这里是一个使用所有修饰符的例子：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>  on<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    keyup<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 如果触发事件的元素不是事件绑定的元素</span>\\n      <span class=\\\"token comment\\\">// 则返回</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">.</span>target <span class=\\\"token operator\\\">!==</span> event<span class=\\\"token punctuation\\\">.</span>currentTarget<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span>\\n      <span class=\\\"token comment\\\">// 如果按下去的不是 enter 键或者</span>\\n      <span class=\\\"token comment\\\">// 没有同时按下 shift 键</span>\\n      <span class=\\\"token comment\\\">// 则返回</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>event<span class=\\\"token punctuation\\\">.</span>shiftKey <span class=\\\"token operator\\\">||</span> event<span class=\\\"token punctuation\\\">.</span>keyCode <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">13</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span>\\n      <span class=\\\"token comment\\\">// 阻止 事件冒泡</span>\\n      event<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stopPropagation</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">// 阻止该元素默认的 keyup 事件</span>\\n      event<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">preventDefault</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">// ...</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><h2 id=\\\"插槽\\\"><a href=\\\"#插槽\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 插槽</h2> <p>你可以通过 this.$slots 访问静态插槽的内容，得到的是一个 VNodes 数组：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>render<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>createElement<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// `&lt;div&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;`</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$slots<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>也可以通过 this.$scopedSlots 访问作用域插槽，得到的是一个返回 VNodes 的函</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>props<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'message'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\nrender<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>createElement<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// `&lt;div&gt;&lt;slot :text=&quot;message&quot;&gt;&lt;/slot&gt;&lt;/div&gt;`</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$scopedSlots<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      text<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>message\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>如果要用渲染函数向子组件中传递作用域插槽，可以利用 <code>VNode</code> 数据对象中的 <code>scopedSlots</code> 域：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>render<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>createElement<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'child'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 在数据对象中传递 `scopedSlots`</span>\\n      <span class=\\\"token comment\\\">// 格式：{ name: props =&gt; VNode | Array&lt;VNode&gt; }</span>\\n      scopedSlots<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">default</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'span'</span><span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">.</span>text<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\"),_vm._ssrNode(\"<h2 id=\\\"ast\\\">\",\"</h2>\",[_vm._ssrNode(\"<a href=\\\"#ast\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> \"),_vm._ssrNode(\"<a href=\\\"http://www.php.cn/js-tutorial-407382.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"AST\"),_c('OutboundLink')],2)],2),_vm._ssrNode(\" <p>AST是指抽象语法树（abstract syntax tree），或者语法树（syntax tree），是源代码的抽象语法结构的树状表现形式。Vue在mount过程中，template会被编译成AST语法树。\\n然后，经过generate（将AST语法树转化成render function字符串的过程）得到render函数，返回VNode。</p> <h2 id=\\\"源码分析\\\"><a href=\\\"#源码分析\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 源码分析</h2> <p>编译相关的代码都在 compiler文件中</p> <p>core/instance / render.js 中</p> <p>observe - 响应式\\n_ 在js中默认为是定义的私有属性 ，建议不要多次访问</p> <p>(视频2-5， 2-6)\\nplatform/util/index.js  判断是否是render 还是template</p> <p>new watcher() 渲染 watcher (observer/watcher.js )</p> <p>Vue 的 _render 方法是实例的一个私有方法，它用来把实例渲染成一个虚拟 Node。它的定义在 src/core/instance/render.js 文件中：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token comment\\\">//再此定义一个render私有方法  返回一个vnode，通过vm.$options拿到render函数</span>\\nVue<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">_render</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> VNode <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> vm<span class=\\\"token punctuation\\\">:</span> Component <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> render<span class=\\\"token punctuation\\\">,</span> _parentVnode <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> vm<span class=\\\"token punctuation\\\">.</span>$options \\n\\n  <span class=\\\"token comment\\\">// 复位_render标志在插槽上用于重复的插槽检查</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">NODE_ENV</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'production'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> key <span class=\\\"token keyword\\\">in</span> vm<span class=\\\"token punctuation\\\">.</span>$slots<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// $flow-disable-line</span>\\n      vm<span class=\\\"token punctuation\\\">.</span>$slots<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>_rendered <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>_parentVnode<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    vm<span class=\\\"token punctuation\\\">.</span>$scopedSlots <span class=\\\"token operator\\\">=</span> _parentVnode<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">.</span>scopedSlots <span class=\\\"token operator\\\">||</span> emptyObject\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 设置父vnode。这允许呈现函数访问占位符节点上的数据。</span>\\n  vm<span class=\\\"token punctuation\\\">.</span>$vnode <span class=\\\"token operator\\\">=</span> _parentVnode\\n  <span class=\\\"token comment\\\">// render self</span>\\n  <span class=\\\"token keyword\\\">let</span> vnode\\n  <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//利用call的方法 参数一当前上下文，vm._renderProxy再生产环境下 就是vm，也就是this 本身，开发环境是一个proxy 对象</span>\\n    vnode <span class=\\\"token operator\\\">=</span> render<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>vm<span class=\\\"token punctuation\\\">.</span>_renderProxy<span class=\\\"token punctuation\\\">,</span> vm<span class=\\\"token punctuation\\\">.</span>$createElement<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">handleError</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> vm<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`render`</span></span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token comment\\\">// 返回错误呈现结果，</span>\\n    <span class=\\\"token comment\\\">// 或先前的vnode，以防止呈现错误导致空白组件</span>\\n    <span class=\\\"token comment\\\">/* istanbul ignore else */</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">NODE_ENV</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'production'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>vm<span class=\\\"token punctuation\\\">.</span>$options<span class=\\\"token punctuation\\\">.</span>renderError<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n          vnode <span class=\\\"token operator\\\">=</span> vm<span class=\\\"token punctuation\\\">.</span>$options<span class=\\\"token punctuation\\\">.</span>renderError<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>vm<span class=\\\"token punctuation\\\">.</span>_renderProxy<span class=\\\"token punctuation\\\">,</span> vm<span class=\\\"token punctuation\\\">.</span>$createElement<span class=\\\"token punctuation\\\">,</span> e<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">catch</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">e</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token function\\\">handleError</span><span class=\\\"token punctuation\\\">(</span>e<span class=\\\"token punctuation\\\">,</span> vm<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`renderError`</span></span><span class=\\\"token punctuation\\\">)</span>\\n          vnode <span class=\\\"token operator\\\">=</span> vm<span class=\\\"token punctuation\\\">.</span>_vnode\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        vnode <span class=\\\"token operator\\\">=</span> vm<span class=\\\"token punctuation\\\">.</span>_vnode\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      vnode <span class=\\\"token operator\\\">=</span> vm<span class=\\\"token punctuation\\\">.</span>_vnode\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 上边 会返回一个 vnode ， $options 这个函数可以自己写 ，也可以通过编译生成</span>\\n  <span class=\\\"token comment\\\">// 如果呈现函数出错，返回空vnode</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">(</span>vnode <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">VNode</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>process<span class=\\\"token punctuation\\\">.</span>env<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">NODE_ENV</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'production'</span> <span class=\\\"token operator\\\">&amp;&amp;</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isArray</span><span class=\\\"token punctuation\\\">(</span>vnode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">warn</span><span class=\\\"token punctuation\\\">(</span>\\n        <span class=\\\"token string\\\">'Multiple root nodes returned from render function. Render function '</span> <span class=\\\"token operator\\\">+</span>\\n        <span class=\\\"token string\\\">'should return a single root node.'</span><span class=\\\"token punctuation\\\">,</span>\\n        vm\\n      <span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    vnode <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">createEmptyVNode</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// set parent</span>\\n  vnode<span class=\\\"token punctuation\\\">.</span>parent <span class=\\\"token operator\\\">=</span> _parentVnode\\n  <span class=\\\"token keyword\\\">return</span> vnode\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>这段代码最关键的是 <code>render</code> 方法的调用，我们在平时的开发工作中手写 <code>render</code> 方法的场景比较少，而写的比较多的是 <code>template</code> 模板，在之前的 mounted 方法的实现中，会把 <code>template</code> 编译成 <code>render</code> 方法，但这个编译过程是非常复杂的，我们不打算在这里展开讲，之后会专门花一个章节来分析 <code>Vue</code> 的编译过程。</p> <p>在 Vue 的官方文档中介绍了 <code>render</code> 函数的第一个参数是 <code>createElement</code>，那么结合之前的例子：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token operator\\\">&lt;</span>div id<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">&quot;app&quot;</span><span class=\\\"token operator\\\">&gt;</span>\\n  <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> message <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">&gt;</span>\\n</code></pre></div><p>相当于我们编写如下 <code>render</code> 函数：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">var</span> vm <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  el<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'#app'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span>createElement<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n      attrs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        id<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'app'</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>message<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">data</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> message<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Hello Vue!'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span> \\n</code></pre></div><p>再回到 <code>_render</code> 函数中的 <code>render</code>方法的调用：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>vnode <span class=\\\"token operator\\\">=</span> render<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>vm<span class=\\\"token punctuation\\\">.</span>_renderProxy<span class=\\\"token punctuation\\\">,</span> vm<span class=\\\"token punctuation\\\">.</span>$createElement<span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>可以看到，<code>render</code> 函数中的 <code>createElement</code> 方法就是 <code>vm.$createElement</code> 方法：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">initRender</span> <span class=\\\"token punctuation\\\">(</span>vm<span class=\\\"token punctuation\\\">:</span> Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...</span>\\n  <span class=\\\"token comment\\\">//将createElement fn绑定到这个实例，这样我们就可以在其中获得适当的呈现上下文。</span>\\n  <span class=\\\"token comment\\\">// args顺序:标签、数据、子元素、normalizationType、alwaysNormalize内部版本由模板编译的呈现函数使用</span>\\n  vm<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">_c</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">,</span> d<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>vm<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">,</span> d<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token comment\\\">//规范化通常应用于公共版本，用于用户编写的呈现函数。</span>\\n  <span class=\\\"token comment\\\">//手写render函数 创建的方法</span>\\n  vm<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">$createElement</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">,</span> d<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>vm<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">,</span> c<span class=\\\"token punctuation\\\">,</span> d<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>实际上，<code>vm.$createElement</code> 方法定义是在执行 <code>initRender</code> 方法的时候，可以看到除了 <code>vm.$createElement</code> 方法，还有一个 <code>vm._c</code> 方法，它是被模板编译成的 <code>render</code> 函数使用，而 <code>vm.$createElement</code> 是用户手写 <code>render</code> 方法使用的， 这俩个方法支持的参数相同，并且内部都调用了 <code>createElement</code> 方法。</p> <h2 id=\\\"总结\\\"><a href=\\\"#总结\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 总结</h2> <h1 id><a href=\\\"#\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a></h1> <ol><li>render方法的实质就是生成template模板；</li> <li>通过调用一个方法来生成，而这个方法是通过render方法的参数传递给它的；</li> <li>这个方法有三个参数，分别提供标签名，标签相关属性，标签内部的html内容</li> <li>通过这三个参数，可以生成一个完整的模板</li></ol> <p>备注：\\nrender方法可以使用JSX语法，但需要Babel plugin插件；\\nrender方法里的第三个参数可以使用函数来生成多个组件（特别是如果他们相同的话），只要生成结果是一个数组，且数组元素都是VNode即可；</p> <p>注意：\\nrender函数室友限制的，Vue.js 2.X支持，但是1.X无法使用。</p> <p><code>vm._render</code>最终是通过执行 <code>createElement</code> 方法并返回的是 <code>vnode</code>，它是一个虚拟 <code>Node</code>。Vue 2.0 相比 Vue 1.0 最大的升级就是利用了 <code>Virtual DOM</code>。因此在分析 <code>createElement</code> 的实现前，我们先了解一下 <code>Virtual DOM</code> 的概念。</p> <h2 id=\\\"参考博客\\\"><a href=\\\"#参考博客\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> [参考博客]</h2> \"),_vm._ssrNode(\"<p>\",\"</p>\",[_vm._ssrNode(\"<a href=\\\"https://blog.csdn.net/wngzhem/article/details/54291024\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"vue Render函数进阶\"),_c('OutboundLink')],2),_vm._ssrNode(\"<br> \"),_vm._ssrNode(\"<a href=\\\"https://www.cnblogs.com/tugenhua0707/p/7528621.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"理解Vue中的Render渲染函数\"),_c('OutboundLink')],2),_vm._ssrNode(\"<br> \"),_vm._ssrNode(\"<a href=\\\"https://blog.csdn.net/weixin_42229553/article/details/80444919\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"(一) Vue基础个人总结，条件渲染，列表渲染，组件等\"),_c('OutboundLink')],2),_vm._ssrNode(\"<br> \"),_vm._ssrNode(\"<a href=\\\"https://www.jb51.net/article/122424.htm\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"如何理解Vue的render函数的具体用法\"),_c('OutboundLink')],2),_vm._ssrNode(\"<br> \"),_vm._ssrNode(\"<a href=\\\"https://www.cnblogs.com/leungUwah/p/6921873.html\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"Vue2.x中的Render函数\"),_c('OutboundLink')],2),_vm._ssrNode(\"<br> \"),_vm._ssrNode(\"<a href=\\\"http://www.alloyteam.com/2017/07/12918/\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">\",\"</a>\",[_vm._ssrNode(\"用jsx写vue组件\"),_c('OutboundLink')],2)],2)],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}
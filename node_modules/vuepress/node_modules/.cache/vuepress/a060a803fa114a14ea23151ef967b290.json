{"remainingRequest":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\WWW\\GitHub\\Vue-analysis\\docs\\vuex\\core.md?vue&type=template&id=74e8ab07&","dependencies":[{"path":"D:\\WWW\\GitHub\\Vue-analysis\\docs\\vuex\\core.md","mtime":1541951447154},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541783222112},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1541783268969},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541783222112},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js","mtime":1541783268967},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1541783271073}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"核心概念\"><a class=\"header-anchor\" href=\"#核心概念\" aria-hidden=\"true\">#</a> 核心概念</h1>\n<p>首先得引入<code>vuex</code>，然后通过\n<code>vue.use(Vuex)</code>来\n注册插件</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//vuex的配置</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token punctuation\">:</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n  store<span class=\"token punctuation\">,</span> <span class=\"token comment\">// store:store</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>一个<code>vue Store</code> 里边包括<code>state（状态）</code>、<code>getters（派生状态）</code>、<code>mutations（提交修改）</code>、<code>actions（提交修改数据）</code>、<code>module</code>。</p>\n<h2 id=\"state\"><a class=\"header-anchor\" href=\"#state\" aria-hidden=\"true\">#</a> State</h2>\n<p><code>state</code> 是用来存储状态，也就是变量；</p>\n<h3 id=\"store-js-中的写入\"><a class=\"header-anchor\" href=\"#store-js-中的写入\" aria-hidden=\"true\">#</a> store.js 中的写入</h3>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n  list<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"在vue中获取vuex的状态\"><a class=\"header-anchor\" href=\"#在vue中获取vuex的状态\" aria-hidden=\"true\">#</a> 在Vue中获取Vuex的状态</h3>\n<p>从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> tpl <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;div>Your number of likes is: {{count}}&lt;/div>`</span></span><span class=\"token punctuation\">,</span>\n  computed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token comment\">//store 为注册的全局</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>state</code> 只是读取数据，他不会修改数据</p>\n<h2 id=\"getters\"><a class=\"header-anchor\" href=\"#getters\" aria-hidden=\"true\">#</a> Getters</h2>\n<p><code>getters</code> 表示派生状态。也就是<code>set</code>、<code>get</code>中的<code>get</code>，有两个可选参数：<code>state</code>、<code>getters</code>分别可以获取<code>state</code>中的变量和其他的<code>getters</code>。外部调用方式：<code>store.getters.personInfo()</code>。就和<code>vue</code>的<code>computed</code>差不多</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code> getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`our number of likes is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">filterdList</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> getters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// return this.$store.list.filter (item => item > 10);</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> item <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p><code>getters</code>中可以通过 参数<code>getters</code>来相互依赖引用其他的<code>getters（getters.getInfo）</code></p>\n<h2 id=\"mutations\"><a class=\"header-anchor\" href=\"#mutations\" aria-hidden=\"true\">#</a> Mutations</h2>\n<p><code>mutations</code> 是对<code>state</code>中的数据修改; 也就是<code>set</code>、<code>get</code>中的<code>set</code>，这是<code>vuex</code>中唯一修改<code>state</code>的方式，但不支持异步操作。<br>\n和<code>vue</code>中的<code>methods</code>事件注册类似：每个mutaion都有一个字符串的事件类型（type）和一个回调函数（handler）。这个回调函数就是我们实际进行状态更改的地方，并且他会接受state作为第一个参数。\n类似于js 的观察者模式，页面提交修改，然后这边做改变处理</p>\n<h3 id=\"提交载荷（payload）\"><a class=\"header-anchor\" href=\"#提交载荷（payload）\" aria-hidden=\"true\">#</a> 提交载荷（payload）</h3>\n<p>可以向 <code>store.commit</code> 传入额外的参数，即 <code>mutation</code> 的 载荷（payload）</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span>n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 第一个参数是 state，第二个参数叫额外的参数，这里是n</span>\n    state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">decresement</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">--</span> <span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 回调函数 increment 和参数10，后者是作为额外参数传入，n 就是10</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token comment\">// payload 作为一个对象，更加可读，统一对象形式调用</span>\n    state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> payload<span class=\"token punctuation\">.</span>amount\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 传入的是对象（即将额外的 mutation 参数以对象的方式传入）</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  amount<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"对象风格提交方式\"><a class=\"header-anchor\" href=\"#对象风格提交方式\" aria-hidden=\"true\">#</a> 对象风格提交方式</h3>\n<p>提交 mutation 的另一种方式是直接使用包含 type 属性的对象：</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token comment\">// 这里也是传入一个对象，不过这个对象包含了 type 属性</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span>\n  amount<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><blockquote>\n<p>这里只是一种提交 mutations 的方式，不必深究。\n当使用这种对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：</p>\n</blockquote>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+=</span> payload<span class=\"token punctuation\">.</span>amount\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// vuex 会将这个对象分解，除了 type 之外的，依然会是作为额外参数传入</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span>\n  amount<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>将整个对象传给 mutation后，vuex 会根据 type 参数识别到这是一个mutation 的载荷参数，然后自动填充 state 参数为第一位，第二位参数为传入的这个对象的第二位参数。</p>\n<p>mutations中尽量不要操作异步数据，操作的话 数据不会立即改变，我们一般情况下都是在actions中操作异步数据</p>\n<h2 id=\"actions\"><a class=\"header-anchor\" href=\"#actions\" aria-hidden=\"true\">#</a> Actions</h2>\n<p>在 <code>mutation</code> 中混合异步调用会导致你的程序很难调试。例如，当你调用了两个包含异步回调的 mutation 来改变状态，你怎么知道什么时候回调和哪个先回调呢？这就是为什么我们要区分这两个概念。在 Vuex 中，mutation 都是同步事务：\n<!-- actions 也是用来提交修改state的，但是它是显式的提交修改mutations，进而可以异步的实现异步 -->\nAction 类似于 <code>mutation</code>，不同在于：</p>\n<p>Action 提交的是 <code>mutation</code>，而不是直接变更状态。\nAction 可以包含任意异步操作。</p>\n<p>第一个参数默认是和<code>store</code>具有相同参数属性的对象。外部调用方式：<code>store.dispatch('nameAsyn')</code>。\n操作</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//context表示上线问</span>\n    context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>触发<code>actions</code> 的方法是在<code>template</code>中我们通过<code>diapatch()</code>来提交</p>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>$store.dispatch(<span class=\"token punctuation\">'</span>increment<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>add<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>我们通过actions来执行异步操作</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>组件中这样实现</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code>  methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">handleActionAdd</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$state<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">111</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>会发现 在两秒后才会状态才会发生改变</p>\n<p>在 <code>store</code> 上注册 <code>action</code>。处理函数总是接受 <code>context</code> 作为第一个参数，<code>payload</code> 作为第二个参数（可选）。</p>\n<p>context 对象包含以下属性：</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 等同于 `store.state`，若在模块中则为局部状态</span>\n  rootState<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 等同于 `store.state`，只存在于模块中</span>\n  commit<span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 等同于 `store.commit`</span>\n  dispatch<span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 等同于 `store.dispatch`</span>\n  getters<span class=\"token punctuation\">,</span>    <span class=\"token comment\">// 等同于 `store.getters`</span>\n  rootGetters <span class=\"token comment\">// 等同于 `store.getters`，只存在于模块中</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>同时如果有第二个参数 payload 的话也能够接收</p>\n<h2 id=\"modules\"><a class=\"header-anchor\" href=\"#modules\" aria-hidden=\"true\">#</a> Modules</h2>\n<p>如果项目比较大的时候，项目全部放到一个<code>store.js</code> 或者 <code>main.js</code> 中 ，感觉比较乱，不太友好，\n所以我们需要按模块分开，<br>\nstore的子模块，内容就相当于是store的一个实例。调用方式和前面介绍的相似，只是要加上当前子模块名，如：<code>store.a.getters.xxx()</code>\n每个模块拥有自己的 <code>state</code>、<code>mutation</code>、<code>action</code>、<code>getter</code>、甚至是嵌套子模块——从上至下进行同样方式的分割：</p>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> moduleA <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  getters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> moduleB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  mutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  modules<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> moduleA<span class=\"token punctuation\">,</span>\n    b<span class=\"token punctuation\">:</span> moduleB\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nstore<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>a <span class=\"token comment\">// -> moduleA 的状态</span>\nstore<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>b <span class=\"token comment\">// -> moduleB 的状态</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"项目结构\"><a class=\"header-anchor\" href=\"#项目结构\" aria-hidden=\"true\">#</a> 项目结构</h2>\n<p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p>\n<ul>\n<li>应用层级的状态应该集中到单个 store 对象中。</li>\n<li>提交 mutation 是更改状态的唯一方法，并且这个过程是同步的。</li>\n<li>异步逻辑都应该封装到 action 里面。</li>\n</ul>\n<p>对于大型应用我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>├── index.html\n├── main.js\n├── api\n│   └── ... # 抽取出API请求\n├── components\n│   ├── App.vue\n│   └── ...\n└── store\n    ├── index.js          # 我们组装模块并导出 store 的地方\n    ├── state.js          # 跟级别的 state\n    ├── getters.js        # 跟级别的 getter\n    ├── mutation-types.js # 根级别的mutations名称（官方推荐mutions方法名使用大写）\n    ├── mutations.js      # 根级别的 mutation\n    ├── actions.js        # 根级别的 action\n    └── modules\n        ├── m1.js         # 模块1\n        └── m2.js         # 模块2\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"参考\"><a class=\"header-anchor\" href=\"#参考\" aria-hidden=\"true\">#</a> 参考</h2>\n<p><a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">vuex<OutboundLink/></a><br>\n<a href=\"https://juejin.im/post/5a5f1a9df265da3e2f00faae\" target=\"_blank\" rel=\"noopener noreferrer\">关于 mutation<OutboundLink/></a><br>\n<a href=\"https://segmentfault.com/a/1190000011528501\" target=\"_blank\" rel=\"noopener noreferrer\">【vuex入门系列02】mutation接收单个参数和多个参数<OutboundLink/></a><br>\n<a href=\"https://blog.csdn.net/wopelo/article/details/80285167\" target=\"_blank\" rel=\"noopener noreferrer\">vuex中mutation/action的传参方式<OutboundLink/></a></p>\n</div>\n",null]}
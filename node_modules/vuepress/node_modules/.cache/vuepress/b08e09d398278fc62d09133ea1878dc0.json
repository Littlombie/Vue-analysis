{"remainingRequest":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!D:\\WWW\\GitHub\\Vue-analysis\\docs\\vuex\\core.md?vue&type=template&id=653d9e42&","dependencies":[{"path":"D:\\WWW\\GitHub\\Vue-analysis\\docs\\vuex\\core.md","mtime":1541330552328},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541330558999},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1541330613225},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1541330558999},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vue-loader\\lib\\index.js","mtime":1541330613223},{"path":"D:\\WWW\\GitHub\\Vue-analysis\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":1541330618009}],"contextDependencies":[],"result":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"content\"},[_vm._ssrNode(\"<h1 id=\\\"核心概念\\\"><a href=\\\"#核心概念\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 核心概念</h1> <p>首先得引入<code>vuex</code>，然后通过\\n<code>vue.use(Vuex)</code>来\\n注册插件</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vuex<span class=\\\"token punctuation\\\">.</span>Store</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//vuex的配置</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vue</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  el<span class=\\\"token punctuation\\\">:</span><span class=\\\"token string\\\">'#app'</span><span class=\\\"token punctuation\\\">,</span>\\n  store<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// store:store</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre></div><p>一个<code>vue Store</code> 里边包括<code>state（状态）</code>、<code>getters（派生状态）</code>、<code>mutations（提交修改）</code>、<code>actions（提交修改数据）</code>、<code>module</code>。</p> <h2 id=\\\"state\\\"><a href=\\\"#state\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> State</h2> <p><code>state</code> 是用来存储状态，也就是变量；</p> <h3 id=\\\"store-js-中的写入\\\"><a href=\\\"#store-js-中的写入\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> store.js 中的写入</h3> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>state<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  count<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">22</span><span class=\\\"token punctuation\\\">,</span>\\n  list<span class=\\\"token punctuation\\\">:</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">6</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">56</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n</code></pre></div><h3 id=\\\"在vue中获取vuex的状态\\\"><a href=\\\"#在vue中获取vuex的状态\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 在Vue中获取Vuex的状态</h3> <p>从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> tpl <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  template<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`&lt;div&gt;Your number of likes is: {{count}}&lt;/div&gt;`</span></span><span class=\\\"token punctuation\\\">,</span>\\n  computed<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">count</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> \\n      <span class=\\\"token comment\\\">//store 为注册的全局</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$store<span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>count\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>state 只是读取数据，他不会修改数据</p> <h2 id=\\\"getters\\\"><a href=\\\"#getters\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Getters</h2> <p><code>getters</code> 表示派生状态。也就是<code>set</code>、<code>get</code>中的<code>get</code>，有两个可选参数：<code>state</code>、<code>getters</code>分别可以获取<code>state</code>中的变量和其他的<code>getters</code>。外部调用方式：<code>store.getters.personInfo()</code>。就和<code>vue</code>的<code>computed</code>差不多</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code> getters<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">getInfo</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`our number of likes is: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>state<span class=\\\"token punctuation\\\">.</span>count<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function\\\">filterdList</span> <span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span> getters<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// return this.$store.list.filter (item =&gt; item &gt; 10);</span>\\n      <span class=\\\"token keyword\\\">return</span> state<span class=\\\"token punctuation\\\">.</span>list<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span> <span class=\\\"token punctuation\\\">(</span>item <span class=\\\"token operator\\\">=&gt;</span> item <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>getters中可以通过 参数<code>getters</code>来相互依赖引用其他的<code>getters（getters.getInfo）</code></p> <h2 id=\\\"mutations\\\"><a href=\\\"#mutations\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Mutations</h2> <p>mutations 是对<code>state</code>中的数据修改<br>\\n类似于js 的观察这模式，页面提交修改，然后这边做改变处理</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>mutations<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">increment</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">,</span>n <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    state<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">+=</span> n<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">decresement</span><span class=\\\"token punctuation\\\">(</span>state<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    state<span class=\\\"token punctuation\\\">.</span>count <span class=\\\"token operator\\\">--</span> <span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>mutations中尽量不要操作异步数据，操作的话 数据不会立即改变，我们一般情况下都是在actions中操作异步数据</p> <h2 id=\\\"actions\\\"><a href=\\\"#actions\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Actions</h2> <p>Action 类似于 <code>mutation</code>，不同在于：</p> <p>Action 提交的是 <code>mutation</code>，而不是直接变更状态。\\nAction 可以包含任意异步操作。</p> <p>操作</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>actions<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">increment</span> <span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">//context表示上线问</span>\\n    context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">commit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'increment'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>触发<code>actions</code> 的方法是在<code>template</code>中我们通过<code>diapatch()</code>来提交</p> <div class=\\\"language-html extra-class\\\"><pre class=\\\"language-html\\\"><code> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>button</span> <span class=\\\"token attr-name\\\">@click</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">&quot;</span>$store.dispatch(<span class=\\\"token punctuation\\\">'</span>increment<span class=\\\"token punctuation\\\">'</span>)<span class=\\\"token punctuation\\\">&quot;</span></span><span class=\\\"token punctuation\\\">&gt;</span></span>add<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>button</span><span class=\\\"token punctuation\\\">&gt;</span></span>\\n</code></pre></div><p>我们通过actions来执行异步操作</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>actions<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">increment</span> <span class=\\\"token punctuation\\\">(</span>context<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span>reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        context<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">commit</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'increment'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>组件中这样实现</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code>  methods<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">handleActionAdd</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>$state<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dispatch</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'increment'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">111</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div><p>会发现 在两秒后才会状态才会发生改变</p> <h2 id=\\\"modules\\\"><a href=\\\"#modules\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> Modules</h2> <p>如果项目比较大的时候，项目全部放到一个<code>store.js</code> 或者 <code>main.js</code> 中 ，感觉比较乱，不太友好，\\n所以我们需要按模块分开，\\n每个模块拥有自己的 <code>state</code>、<code>mutation</code>、<code>action</code>、<code>getter</code>、甚至是嵌套子模块——从上至下进行同样方式的分割：</p> <div class=\\\"language-javascript extra-class\\\"><pre class=\\\"language-javascript\\\"><code><span class=\\\"token keyword\\\">const</span> moduleA <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  state<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  mutations<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  actions<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  getters<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> moduleB <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  state<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  mutations<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  actions<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token operator\\\">...</span> <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> store <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Vuex<span class=\\\"token punctuation\\\">.</span>Store</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  modules<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    a<span class=\\\"token punctuation\\\">:</span> moduleA<span class=\\\"token punctuation\\\">,</span>\\n    b<span class=\\\"token punctuation\\\">:</span> moduleB\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\nstore<span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token comment\\\">// -&gt; moduleA 的状态</span>\\nstore<span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>b <span class=\\\"token comment\\\">// -&gt; moduleB 的状态</span>\\n</code></pre></div><h2 id=\\\"项目结构\\\"><a href=\\\"#项目结构\\\" aria-hidden=\\\"true\\\" class=\\\"header-anchor\\\">#</a> 项目结构</h2> <p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p> <ul><li>应用层级的状态应该集中到单个 store 对象中。</li> <li>提交 mutation 是更改状态的唯一方法，并且这个过程是同步的。</li> <li>异步逻辑都应该封装到 action 里面。</li></ul> <p>对于大型应用我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p> <div class=\\\"language- extra-class\\\"><pre class=\\\"language-text\\\"><code>├── index.html\\n├── main.js\\n├── api\\n│   └── ... # 抽取出API请求\\n├── components\\n│   ├── App.vue\\n│   └── ...\\n└── store\\n    ├── index.js          # 我们组装模块并导出 store 的地方\\n    ├── actions.js        # 根级别的 action\\n    ├── mutations.js      # 根级别的 mutation\\n    └── modules\\n        ├── cart.js       # 购物车模块\\n        └── products.js   # 产品模块\\n</code></pre></div>\")])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }"]}